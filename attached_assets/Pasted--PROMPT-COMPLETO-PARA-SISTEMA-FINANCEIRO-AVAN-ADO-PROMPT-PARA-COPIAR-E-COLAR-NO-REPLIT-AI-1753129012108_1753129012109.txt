# üöÄ PROMPT COMPLETO PARA SISTEMA FINANCEIRO AVAN√áADO

## üìã PROMPT PARA COPIAR E COLAR NO REPLIT AI:

```
Crie um sistema AVAN√áADO de gest√£o financeira em Python Flask com TODAS estas funcionalidades:

**üéØ FUNCIONALIDADES PRINCIPAIS:**
1. Dashboard com estat√≠sticas em tempo real e gr√°ficos
2. Gest√£o completa de clientes (CRUD + CPF/CNPJ + WhatsApp)
3. Contas a receber com parcelas e status avan√ßado
4. Contas a pagar com fornecedores e vencimentos
5. Sistema de vendas parceladas com confirma√ß√£o digital
6. Integra√ß√£o WhatsApp com Evolution API
7. Lembretes autom√°ticos personaliz√°veis
8. Sistema de planos com limites por usu√°rio
9. Painel administrativo completo
10. PWA com instala√ß√£o e offline

**üõ†Ô∏è STACK TECNOL√ìGICO COMPLETO:**
- Backend: Python Flask + SQLAlchemy + PostgreSQL/SQLite
- Frontend: HTML5 + Bootstrap 5 + JavaScript + PWA
- Autentica√ß√£o: Flask Sessions multi-usu√°rio
- APIs Externas: Evolution API para WhatsApp
- Banco: PostgreSQL com migration autom√°tica

**üìä ESTRUTURA DE DADOS COMPLEXA:**
```
users: id, username, email, password, isAdmin, phone, createdAt
clients: id, userId, name, whatsapp, document(CPF/CNPJ), email, address, zipCode, city, state
receivables: id, userId, clientId, description, amount, dueDate, status, type, installmentNumber, totalInstallments, parentId
payables: id, userId, supplierId, description, amount, dueDate, status, category
installment_sales: id, userId, clientId, totalAmount, installments, description, status, confirmationToken, documentPhoto, approvalNotes
whatsapp_messages: id, userId, clientId, messageType, content, status, templateType, sentAt
payment_reminders: id, userId, name, message, time, isActive, days, reminderType
user_plans: id, userId, planName, maxClients, maxReceivables, maxPayables, isActive, expiresAt
user_whatsapp_instances: id, userId, instanceName, phoneNumber, status, qrCode
system_settings: id, systemName, logoUrl, faviconUrl, primaryColor, secondaryColor, description
```

**üîß FUNCIONALIDADES AVAN√áADAS OBRIGAT√ìRIAS:**

1. **Sistema Multi-Usu√°rio:**
   - Registro e login de usu√°rios
   - Isolamento de dados por usu√°rio
   - Permiss√µes admin vs usu√°rio comum

2. **Vendas Parceladas com Confirma√ß√£o Digital:**
   - Criar venda parcelada com link √∫nico
   - Cliente acessa link p√∫blico e confirma venda
   - Upload de foto do documento como assinatura
   - Admin aprova/rejeita com notas
   - Gera√ß√£o autom√°tica de parcelas em contas a receber

3. **Integra√ß√£o WhatsApp Evolution API:**
   - Configura√ß√£o de inst√¢ncias por usu√°rio
   - Envio autom√°tico de link de confirma√ß√£o
   - Notifica√ß√µes de aprova√ß√£o/rejei√ß√£o
   - Lembretes de vencimento autom√°ticos
   - QR Code para conex√£o WhatsApp

4. **Sistema de Lembretes Inteligente:**
   - Lembretes personaliz√°veis por hor√°rio
   - Diferentes tipos: vencimento, cobran√ßa, follow-up
   - Templates de mensagem customiz√°veis
   - Processamento autom√°tico em background

5. **Sistema de Planos e Limites:**
   - Planos: B√°sico, Premium, Enterprise
   - Limites por plano: max clientes, contas, funcionalidades
   - Cobran√ßa autom√°tica mensal
   - Upgrade/downgrade de planos

6. **Painel Administrativo:**
   - Gerenciar usu√°rios e planos
   - Configura√ß√µes globais do sistema
   - Logs de atividade
   - Estat√≠sticas gerais
   - Configura√ß√£o Evolution API global

7. **PWA e Personaliza√ß√£o:**
   - Progressive Web App instal√°vel
   - Personaliza√ß√£o: logo, cores, nome do sistema
   - Favicon din√¢mico
   - Modo offline b√°sico

**üì± APIs REST COMPLETAS:**
```
# Autentica√ß√£o
POST /api/register
POST /api/login
POST /api/logout
GET /api/user

# Dashboard
GET /api/dashboard
GET /api/status

# CRUD Entities
GET|POST /api/clients
GET|PUT|DELETE /api/clients/:id

GET|POST /api/receivables
GET|PUT|DELETE /api/receivables/:id

GET|POST /api/payables
GET|PUT|DELETE /api/payables/:id

# Vendas Parceladas
GET|POST /api/installment-sales
GET|PUT|DELETE /api/installment-sales/:id
POST /api/installment-sales/:id/approve
POST /api/installment-sales/:id/reject
POST /api/installment-sales/:id/regenerate-token

# WhatsApp
GET|POST /api/whatsapp/instances
DELETE /api/whatsapp/instances/:id
POST /api/whatsapp/send-message
GET /api/whatsapp/messages

# Lembretes
GET|POST /api/reminders
GET|PUT|DELETE /api/reminders/:id

# Admin
GET /api/admin/users
GET|PUT /api/admin/users/:id
GET|POST /api/admin/system-settings

# Planos
GET /api/plans
POST /api/plans/upgrade
GET /api/plan-limits
```

**üé® INTERFACE MODERNA OBRIGAT√ìRIA:**
- Design responsivo mobile-first
- Cards com gradientes e sombras
- Tabelas com filtros e pagina√ß√£o
- Modais para CRUD operations
- Notifica√ß√µes toast elegantes
- Loading states e skeleton screens
- Tema escuro/claro opcional

**‚ö° DADOS PR√â-CARREGADOS REALISTAS:**
- Admin: joel / 123456
- 3 usu√°rios exemplo com planos diferentes
- 8 clientes com dados completos (CPF, WhatsApp, endere√ßo)
- 12 contas a receber (simples e parceladas)
- 6 contas a pagar com fornecedores
- 2 vendas parceladas em diferentes status
- Lembretes configurados
- Inst√¢ncias WhatsApp exemplo

**üîí SEGURAN√áA E VALIDA√á√ÉO:**
- Hash de senhas com bcrypt
- Valida√ß√£o de CPF/CNPJ
- Sanitiza√ß√£o de inputs
- Rate limiting em APIs
- CSRF protection
- Session timeout

**üì¶ DEPLOYMENT READY:**
- requirements.txt completo
- Dockerfile opcional
- Environment variables
- Database migrations
- Health checks
- Error handling robusto

**üöÄ ESTRUTURA DE ARQUIVOS OBRIGAT√ìRIA:**
```
app.py                    # Main Flask app
models.py                 # SQLAlchemy models
api/                      # API blueprints
  __init__.py
  auth.py                 # Authentication routes
  clients.py              # Client CRUD
  receivables.py          # Receivables CRUD
  payables.py             # Payables CRUD
  installment_sales.py    # Sales management
  whatsapp.py             # WhatsApp integration
  admin.py                # Admin panel
templates/                # Jinja2 templates
  base.html              # Base template
  auth/                  # Auth pages
  dashboard.html         # Main dashboard
  clients.html           # Client management
  receivables.html       # Receivables
  payables.html          # Payables
  installment_sales.html # Sales management
  whatsapp.html          # WhatsApp config
  admin.html             # Admin panel
static/                  # Static files
  css/
  js/
  images/
requirements.txt         # Dependencies
```

**üîß CONFIGURA√á√ïES EVOLUTION API:**
- Endpoint: POST https://api.evolutionapi.com/instance/create
- Headers: {'apikey': 'YOUR_API_KEY', 'Content-Type': 'application/json'}
- Body: {'instanceName': 'instance_name', 'number': 'phone_number'}
- WebSocket para QR Code e status
- Envio de mensagem: POST /message/sendText

**‚öôÔ∏è ENVIRONMENT VARIABLES:**
```
DATABASE_URL=sqlite:///financeiro.db
FLASK_SECRET_KEY=your_secret_key_here
EVOLUTION_API_URL=https://api.evolutionapi.com
EVOLUTION_API_KEY=your_evolution_api_key
FLASK_ENV=development
```

**üéØ RESULTADO FINAL ESPERADO:**
Um sistema completo que rivaliza com solu√ß√µes comerciais como:
- ContaAzul
- Granatum
- Organizze
- Mobills

Com TODAS as funcionalidades avan√ßadas implementadas e funcionando perfeitamente.

Implemente um sistema PROFISSIONAL e COMPLETO, n√£o um MVP b√°sico. Use SQLAlchemy models, Blueprints para organiza√ß√£o, e templates Jinja2. Sistema deve ter a qualidade de um SaaS comercial pronto para produ√ß√£o.
```

## üéØ INSTRU√á√ïES DE USO:

## üéØ INSTRU√á√ïES DE USO:

1. **Acesse Replit.com**
2. **Clique em "Create Repl"**
3. **Selecione "Python"**
4. **Cole o prompt acima no chat do Replit AI**
5. **Aguarde a cria√ß√£o autom√°tica**
6. **Execute com "python app.py"**

## ‚úÖ RESULTADO GARANTIDO:

- Sistema financeiro completo em arquivo √∫nico
- Interface moderna com Bootstrap 5
- Todas as funcionalidades implementadas
- Login: joel / 123456
- Dados de exemplo pr√©-carregados
- Zero configura√ß√£o necess√°ria
- Funcionamento imediato

Este novo sistema ser√° totalmente independente e funcionar√° perfeitamente desde o primeiro momento!